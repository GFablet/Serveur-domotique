/* Generated By:JavaCC: Do not edit this line. CParserDSDL.java */
    package scenarios.parser;

    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.util.List;
    import java.util.ArrayList;


    public class CParserDSDL implements CParserDSDLConstants {
        public static void main(String[] args)
        throws TokenMgrError, FileNotFoundException {
            CParserDSDL lParser = new CParserDSDL(
                    new FileInputStream(args[0]));

            try {
                lParser.Start() ;
            } catch (ParseException lException) {
                System.out.println("Erreur de parsing : " + lException.getMessage());
            }

            // TODO : ici doit se trouver la demande d'exécution du scénario.
        }

  final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENTARY:
      case EOL:
      case SWITCH_ON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SWITCH_ON:
        Instruction();
      System.out.println("Instruction lue !");
        break;
      case EOL:
        jj_consume_token(EOL);
        break;
      case COMMENTARY:
        jj_consume_token(COMMENTARY);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void Instruction() throws ParseException {
    SwitchOnAction();
      System.out.println("Instruction lue !");
  }

  final public void SwitchOnAction() throws ParseException {
    Token t1 = null;
    Token t2 = null;
    Token t3 = null;
    Token t4 = null;
    Token t5 = null;
    jj_consume_token(SWITCH_ON);
    t1 = jj_consume_token(ID);
    jj_consume_token(OF);
    jj_consume_token(PAR_OPEN);
    t2 = jj_consume_token(ID);
    jj_consume_token(SEP);
    t3 = jj_consume_token(ID);
    jj_consume_token(PAR_CLOSE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DURING:
      jj_consume_token(DURING);
      t4 = jj_consume_token(NUMBER);
      t5 = jj_consume_token(UNIT);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(EOL);
        if ( (t4 == null) && (t5 == null) ) {
            System.out.println("Allumage \u00e9quipement en cours (sans dur\u00e9e) !");
        } else {
            long duration = ComputeDuration(t4.image, t5.image);


            System.out.println("Allumage \u00e9quipement en cours (avec dur\u00e9e) !");
        }
  }

  final public long ComputeDuration(String pDuration, String pUnit) throws ParseException {
    long duration = Integer.parseInt(pDuration);
        if ("seconds".equals(pUnit)) {
            duration *= 1000;
        } if ("minute".equals(pUnit)) {
            duration *= 60000;
        } if ("minutes".equals(pUnit)) {
            duration *= 60000;
        } else if ("hour".equals(pUnit)) {
            duration *= 3600000;
        } else if ("hours".equals(pUnit)) {
            duration *= 3600000;
        } else if ("day".equals(pUnit)) {
            duration *= 86400000;
        } else if ("days".equals(pUnit)) {
            duration *= 86400000;
        }
        {if (true) return duration;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CParserDSDLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000c,0x80000c,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public CParserDSDL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CParserDSDL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CParserDSDLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CParserDSDL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CParserDSDLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CParserDSDL(CParserDSDLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CParserDSDLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }
