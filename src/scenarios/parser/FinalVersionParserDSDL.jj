options {
    STATIC = false ;
}
PARSER_BEGIN(CParserDSDL)
    package scenarios.parser;

    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.util.List;
    import java.util.ArrayList;
    

    public class CParserDSDL {
        public static void main(String[] args)
        throws TokenMgrError, FileNotFoundException {
            CParserDSDL lParser = new CParserDSDL(
                    new FileInputStream(args[0]));

            try {
                lParser.Start() ;
            } catch (ParseException lException) {
                System.out.println("Erreur de parsing : " + lException.getMessage());
            }
            
            // TODO : ici doit se trouver la demande d'exécution du scénario.
        }
    }
PARSER_END(CParserDSDL)

SKIP  : { " " }
TOKEN : { <COMMENTARY : "#"(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"*"|"_"|" "|":"|"-"|"'")*> }
TOKEN : { <EOL        : "\n" | "\r" | "\r\n"> }
TOKEN : { <ACC_OPEN   : "{"> }
TOKEN : { <ACC_CLOSE  : "}"> }
TOKEN : { <PAR_OPEN   : "("> }
TOKEN : { <PAR_CLOSE  : ")"> }
TOKEN : { <SEP        : ";"> }

TOKEN : { <ASSOCIATE  : "associer"> }
TOKEN : { <AT         : "a"> }
TOKEN : { <DO         : "faire"> }
TOKEN : { <DAY        : "jour"> }
TOKEN : { <DURING     : "pendant"> }
TOKEN : { <EACH       : "chaque"> }
TOKEN : { <ELSE       : "autre"> }
TOKEN : { <EVERYDAY   : "chaque jours"> }
TOKEN : { <EXCEPT     : "sauf"> }
TOKEN : { <FOR        : "pour"> }
TOKEN : { <IF         : "si"> }
TOKEN : { <OF         : "de"> }
TOKEN : { <ON         : "sur"> }
TOKEN : { <SWITCH_OFF : "eteindre"> }
TOKEN : { <SWITCH_ON  : "allumer"> }
TOKEN : { <THEN       : "puis"> }
TOKEN : { <TO         : "vers"> }
TOKEN : { <WAIT       : "attendre"> }
TOKEN : { <WHEN       : "quand"> }

TOKEN : { <DAYS       : "dimanche" | "lundi" | "mardi" | "mercredi" | "jeudi" | "vendredi" | "samedi"> }
TOKEN : { <UNIT       : <U_SECONDS> | <U_MINUTES> | <U_HOURS> | <U_DAYS> > }
TOKEN : { <DATE       : ["0"-"9"]["0"-"9"]"/"["0"-"9"]["0"-"9"]"/"["0"-"9"]["0"-"9"]> }
TOKEN : { <TIME       : (["0"-"9"])?["0"-"9"]":"["0"-"9"]["0"-"9"]":"["0"-"9"]["0"-"9"]> }
TOKEN : { <#U_SECONDS : "seconde" | "secondes"> }
TOKEN : { <#U_MINUTES : "minute" | "minutes"> }
TOKEN : { <#U_HOURS   : "heure" | "heures"> }
TOKEN : { <#U_DAYS    : "jour" | "jours"> }
TOKEN : { <ID         : (["a"-"z"]|["A"-"Z"]|"_")(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"_"|"-"|"/"|"'"|<NUMBER>)+> }
TOKEN : { <NUMBER     : (["0"-"9"])+ > }


void Start() :
{
}
{
    (
    Instruction()
    { System.out.println("Instruction lue !"); }
    |
    <EOL>
    |
    <COMMENTARY>
    )*
    <EOF>
}

void Instruction() :
{
}
{
    SwitchOnAction()
    { System.out.println("Instruction lue !"); }
}

void SwitchOnAction() :
{
    Token t1 = null;
    Token t2 = null;
    Token t3 = null;
    Token t4 = null;
    Token t5 = null;
}
{
    <SWITCH_ON> t1=<ID> <OF> <PAR_OPEN> t2=<ID> <SEP> t3=<ID> <PAR_CLOSE> (<DURING> t4=<NUMBER> t5=<UNIT>)? <EOL>
    {
        if ( (t4 == null) && (t5 == null) ) {
            System.out.println("Allumage équipement en cours (sans durée) !");
			//CScenarioManager.getInstance().addAction(new CSwitchOnAction(t1.image, t2.image, t3.image));
        } else {
            long duration = ComputeDuration(t4.image, t5.image);


            System.out.println("Allumage équipement en cours (avec durée) !");
			//CScenarioManager.getInstance().addAction(new CSwitchOnAction(t1.image, t2.image, t3.image, duration));
        }
    }
}

long ComputeDuration(String pDuration, String pUnit) :
{
    long duration = Integer.parseInt(pDuration);
}
{
    {
        if ("seconds".equals(pUnit)) {
            duration *= 1000;
        } if ("minute".equals(pUnit)) {
            duration *= 60000;
        } if ("minutes".equals(pUnit)) {
            duration *= 60000;
        } else if ("hour".equals(pUnit)) {
            duration *= 3600000;
        } else if ("hours".equals(pUnit)) {
            duration *= 3600000;
        } else if ("day".equals(pUnit)) {
            duration *= 86400000;
        } else if ("days".equals(pUnit)) {
            duration *= 86400000;
        }
        return duration;
    }
}
